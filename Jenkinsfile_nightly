#!groovy

properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    pipelineTriggers([cron('H 04 * * *')]),
    parameters([
        string(name: 'URL_TO_TEST', defaultValue: 'http://bar-api-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
        string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The Idam url you want to run these tests against'),
        string(name: 'OAUTH2_REDIRECT_URI', defaultValue: 'https://bar.aat.platform.hmcts.net/oauth2/callback', description: 'The redirect url you want to authenticate users and get idam token'),
        string(name: 'PAYMENT_API_URL', defaultValue: 'http://payment-api-aat.service.core-compute-aat.internal', description: 'The Payment API url you want to run these tests against'),
        string(name: 'SecurityRules',
            defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
            description: 'SecurityUrl against which rules will be executed'),
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "bar"
def component = "api"

def secrets = [
    'bar-${env}': [
        secret('bar-IDAM-CLIENT-SECRET', 'OAUTH2_CLIENT_SECRET'),
        secret('idam-test-user-password', 'TEST_USER_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.IDAM_API_URL = params.IDAM_API_URL
    env.OAUTH2_REDIRECT_URI = params.OAUTH2_REDIRECT_URI
    loadVaultSecrets(secrets)
    enableSecurityScan()
    enableMutationTest()
    enableFortifyScan()
    enableFullFunctionalTest()
    enableSlackNotifications('#cc-payments-tech')

    afterAlways('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    afterAlways('fullFunctionalTest') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/target/site/serenity/",
            reportFiles          : "index.html",
            reportName           : "Bar Api AAT Functional Tests",
        ]
    }
}
