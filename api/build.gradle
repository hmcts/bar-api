sourceSets {

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
    }
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
    }
}

apply plugin: 'idea'
idea {
    module {
        testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
        testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    }
}

dependencies {
    compile project(':bar-model')

    compile 'uk.gov.hmcts.reform:java-logging-spring'

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile group: 'org.ff4j', name: 'ff4j-spring-boot-web-api', version: '1.7.1'

    compile 'org.liquibase:liquibase-core'
    compile(group: 'org.postgresql', name: 'postgresql') {
        exclude(module: 'commons-logging')
        exclude(module: 'slf4j-simple')
    }

    compile 'io.springfox:springfox-swagger2'
    compile 'io.springfox:springfox-swagger-ui'

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    testCompile 'org.springframework.security:spring-security-test'
    testCompile 'org.hsqldb:hsqldb'

    testCompile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.7'

    // smoke
    smokeTestCompile sourceSets.test.runtimeClasspath

    // functional
    functionalTestCompile sourceSets.test.runtimeClasspath
}

test {
    exclude '**/ComponentTestBase*'
}

task smokeTest(type: Test, description: 'Runs the smoke tests', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task functionalTest(type: Test, description: 'Runs the smoke functional', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

