plugins {
    id 'application'
    id 'org.springframework.boot' version '2.3.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'uk.gov.hmcts.java' version '0.12.0'
    id "com.gorylenko.gradle-git-properties" version "1.4.21"
    id "org.sonarqube" version "2.6.2"
    id 'jacoco'
}
def springBootVersion = '2.3.6.RELEASE'

def versions = [
        lombok: '1.18.12',
        javaVersion: '11',
        jacocoVersion: '0.8.5'
]

allprojects {
    apply plugin: 'maven'
    apply plugin: 'io.spring.dependency-management'

    group = 'uk.gov.hmcts.reform.bar'
    ext {
        buildNumber = System.getenv("BUILD_NUMBER") ?: '0'
    }
    version = rootProject.file('version.txt').text.trim() + ".${buildNumber}"

    sourceCompatibility = versions.javaVersion
    targetCompatibility = versions.javaVersion

    repositories {
        mavenLocal()
        jcenter()
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails det ->
                if (det.requested.name == 'tomcat-embed-core') {
                    det.useVersion '9.0.41'
                }

                if (det.requested.name == 'tomcat-embed-websocket') {
                    det.useVersion '9.0.41'
                }

                if (det.requested.group == 'com.fasterxml.jackson.core') {
                    det.useVersion '2.12.0'
                }
                if (det.requested.name == 'bcprov-jdk15on') {
                    det.useVersion '1.68'
                }
                if (det.requested.name == 'micrometer-core' && det.requested.group == 'io.micrometer') {
                    det.useVersion '1.6.1'
                }
            }

        }
    }

    dependencyManagement {
        imports {
             mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }

        dependencies {

            // solves CVE-2019-12086
            // remove once spring manager incorporates this changes
            dependencySet(group: 'com.fasterxml.jackson.core', version: '2.10.1') {
                entry 'jackson-core'
                entry 'jackson-databind'
            }

            dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.1'
            dependency 'com.google.guava:guava:30.1-jre'

            dependency 'org.liquibase:liquibase-core:3.7.0'
            dependency 'org.postgresql:postgresql:42.2.6'

            dependency 'io.springfox:springfox-swagger2:2.9.2'
            dependency 'io.springfox:springfox-swagger-ui:2.9.2'
            dependency 'commons-beanutils:commons-beanutils:1.9.3'
            dependency 'org.hibernate:hibernate-validator:6.0.9.Final'
        }
    }
}

tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach {
                testTask ->
                    if (testTask.getTaskIdentity().name == "test") {
                        sourceSets subproject.sourceSets.main
                        executionData(testTask)
                    }
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    project(":bar-client") {
        sonarqube {
            skipProject = true
        }
    }
    dependencies {
        compile ('com.sun.xml.bind:jaxb-osgi:2.3.1')
        compile (group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4') {
            exclude(module: 'java-logging-spring')
        }
        compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.11'
        compile 'uk.gov.hmcts.reform:health-spring-boot-starter:0.0.4'
        compileOnly 'org.projectlombok:lombok:1.16.16'
        compileOnly 'com.google.code.findbugs:annotations:3.0.1'

        testCompile 'junit:junit:4.12'
        testCompile 'org.assertj:assertj-core:3.8.0'
        testCompile 'com.tngtech.java:junit-dataprovider:1.13.1'

        compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

        compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.3.6.RELEASE'
    }
}

dependencies {
    compile project(':bar-api')
}

jar {
    enabled = true
}

bootJar  {
    archiveName 'bar-app.jar'
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

springBoot {
    mainClassName = 'uk.gov.hmcts.bar.api.BarServiceApplication'
    buildInfo()
}

dependencyCheck {
    failBuildOnCVSS = 0
    suppressionFile = 'dependency-check-suppressions.xml'
}

def sonarExclusions = [
        '**/**/data/model/*.java',
        '**/BarServiceApplication.java',
        '**/Error.java',
        '**/ResourceNotFoundException.java',
        '**/*Configuration.java',
        '**/BaseRepository.java',
        '**/*Exception.java',
        '**/PayHubHealthCheck.java'
]

sonarqube {
    properties {
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.test.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.exclusions", sonarExclusions.join(", ")
        property "sonar.projectName", "bar-app"
        property "sonar.projectKey", "uk.gov.hmcts.reform.bar:bar-app"
    }
}

project.tasks['sonarqube'].dependsOn codeCoverageReport

task smoke(type: GradleBuild, description: 'Runs smoke tests', group: 'Verification') {
    buildFile = './api/build.gradle'
    tasks = ['smokeTest']
}

task functional(type: GradleBuild, description: 'Runs Functional tests', group: 'Verification') {
    buildFile = './api/build.gradle'
    tasks = ['functionalTest']
}

task printVersion {
    description 'Prints the version of this project'
    doLast {
        print project.version
    }
}

run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}

mainClassName = 'uk.gov.hmcts.bar.api.BarServiceApplication'
