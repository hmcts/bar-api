plugins {
    id 'application'
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.owasp.dependencycheck' version '9.1.0'
    id "uk.gov.hmcts.java" version '0.12.43'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "org.sonarqube" version "3.0"
    id 'jacoco'
}

def springBootVersion = '2.7.13'
def springCloudVersion = '2021.0.3'

def versions = [
        lombok: '1.18.28',
        javaVersion: '17',
        jacocoVersion: '0.8.5'
]

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

allprojects {
    apply plugin: 'io.spring.dependency-management'

    group = 'uk.gov.hmcts.reform.bar'
    ext {
        buildNumber = System.getenv("BUILD_NUMBER") ?: '0'
    }
    version = rootProject.file('version.txt').text.trim() + ".${buildNumber}"

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://jitpack.io'
        }
    }

    apply from: "${rootDir}/cve-resolution-strategy.gradle"


    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
        dependencies {

            dependency 'org.liquibase:liquibase-core:4.27.0'
            dependency 'org.postgresql:postgresql:42.3.2'

            dependency 'commons-beanutils:commons-beanutils:1.9.3'

        }
    }
}

tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach {
                testTask ->
                    if (testTask.getTaskIdentity().name == "test") {
                        sourceSets subproject.sourceSets.main
                        executionData(testTask)
                    }
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

ext['tomcat.version'] = '9.0.88' // CVE-2023-46589, CVE-2023-42794, CVE-2023-28709
ext['jackson.version'] = '2.16.0' // CVE-2021-46877, CVE-2022-42003, CVE-2022-42004, CVE-2020-36518

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    project(":bar-client") {
        sonarqube {
            skipProject = true
        }
    }

    dependencies {
        implementation group: 'org.springframework.security', name: 'spring-security-rsa', version: '1.1.1', {
            exclude group: 'com.google.guava', module: 'guava' // guava-30.1-jre.jar CVE-2023-2976, CVE-2020-8908
        }

        implementation ('com.sun.xml.bind:jaxb-osgi:2.3.1')
        implementation (group: 'com.github.hmcts', name: 'auth-checker-lib', version: '2.1.4') {
            exclude(module: 'java-logging-spring')
            exclude group: 'com.google.guava', module: 'guava' // guava-30.1-jre.jar CVE-2023-2976, CVE-2020-8908
        }
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
        implementation 'org.projectlombok:lombok:1.16.16'
        implementation 'com.google.code.findbugs:annotations:3.0.1'
        implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.16'
        implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

        testImplementation 'junit:junit:4.12'
        testImplementation 'org.assertj:assertj-core:3.8.0'
        testImplementation 'com.tngtech.java:junit-dataprovider:1.13.1'

        implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        implementation 'org.springframework.boot:spring-boot-starter-validation'
    }
}

dependencies {
    implementation project(':bar-api')
    testImplementation 'com.github.hmcts:fortify-client:1.4.1:all'
}

task fortifyScan(type: JavaExec)  {
    main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

jar {
    enabled = true
}

bootJar  {
    archiveName 'bar-app.jar'
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

springBoot {
    mainClassName = 'uk.gov.hmcts.bar.api.BarServiceApplication'
    buildInfo()
}

dependencyCheck {
    failBuildOnCVSS = 0
    suppressionFile = 'dependency-check-suppressions.xml'
}

def sonarExclusions = [
        '**/**/data/model/*.java',
        '**/BarServiceApplication.java',
        '**/Error.java',
        '**/ResourceNotFoundException.java',
        '**/*Configuration.java',
        '**/BaseRepository.java',
        '**/*Exception.java',
        '**/PayHubHealthCheck.java'
]

sonarqube {
    properties {
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.test.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.exclusions", sonarExclusions.join(", ")
        property "sonar.projectName", "bar-app"
        property "sonar.projectKey", "uk.gov.hmcts.reform.bar:bar-app"
    }
}

project.tasks['sonarqube'].dependsOn codeCoverageReport

task smoke(type: GradleBuild, description: 'Runs smoke tests', group: 'Verification') {
    buildFile = './api/build.gradle'
    tasks = ['smokeTest']
}

task migratePostgresDatabase(type: GradleBuild, description: 'Migrates Postgres Database', group: 'liquibase') {
    //forward projectProperties
    startParameter.projectProperties = project.gradle.startParameter.projectProperties
    buildFile = './api/build.gradle'
    tasks = ['migratePostgresDatabase']
}

task functional(type: GradleBuild, description: 'Runs Functional tests', group: 'Verification') {
    buildFile = './api/build.gradle'
    tasks = ['functionalTest']
}

task printVersion {
    description 'Prints the version of this project'
    doLast {
        print project.version
    }
}

run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}

mainClassName = 'uk.gov.hmcts.bar.api.BarServiceApplication'
